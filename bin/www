#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('simple-timer:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


var config = require('../config');

var instances = config.instances;
const MAX_INSTANCES = instances.length;

var io = require('socket.io')(server);

var clients = [];

instances.map( i => {
  i.currentTime = convertToMs(i.initial);
})

console.log(instances);

io.on('connection', (socket) => {

  clients.push(socket);

  socket.on('get timer', (data) => {    
    let instance = instances[data.id];    
    socket.emit('timer', instance);
  });

  socket.on('reinitialize', (data) => {        
    let instance = instances[data.id];       
    let initialMs = convertToMs(instance.initial);    
    instances[data.id].currentTime = initialMs;
    io.emit('timer', instance);
  })

  socket.on('update timer', (data) => {
    updateTimer(instances[data.instance], data.timer);
    socket.emit('updated', `Instance ${instances[data.instance]} updated`);
  });

  socket.on('save changes', (data) => {    
    instances[data.id] = data;
    io.emit('reinitialize', data.id)
    console.log(`Changes has been done at Instance ${data.id}`);
  });

  socket.on('disconnect', (socket) => {
    var idx = clients.indexOf(socket);
    if (idx > -1) clients.splice(idx, 1);
  });

  io.emit('newConnection', socket.request.connection.remoteAddress.slice(7));


})


init();

function init(){

  setInterval(() => {
    for (let i =0 ; i < MAX_INSTANCES; i++){
      countDown(instances[i]);
    }    
  }, 1000);

}


function countDown(instance){
  let currentTime = instance.currentTime - 1000;
  instance.currentTime = currentTime;      
}

function updateTimer(instance, time){
  instances[instance].currentTime = time; 
}

function convertToMs(timeString){
  if (!timeString){
    return;
  }
  var tms = ((Number(timeString.split(':')[0]) * 60) + (Number(timeString.split(':')[1])))
  tms = tms*1000;
  return tms;
}







/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
